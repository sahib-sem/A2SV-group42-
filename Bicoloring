from collections import defaultdict
import sys
import threading
def main():
    def dfs(curr_node , colors , graph, visited , color):
        if colors[curr_node - 1] == 0:
            colors[curr_node - 1] = color
        color = -1 * color
        visited.add(curr_node)
        for neighbour in graph[curr_node]:
            if colors[neighbour - 1] == -1 * color:
                    return False
            if neighbour not in visited:
                res = dfs(neighbour , colors, graph , visited, color)
                if not res:
                    return False
        return True



    while True:
        n = int(input())
        if n == 0:
            break
        l = int(input())
        colors = [0 for _ in range(n)]
        graph = {i:[] for i in range(1, n + 1)}
        for _ in range(l):
            a, b = list(map(int, input().split()))
            graph[a].append(b)
            graph[b].append(a)
        
        if dfs(a, colors, graph ,set() , 1):
            print('BICOLOURABLE.')
        else:
            print('NOT BICOLOURABLE.')
    
sys.setrecursionlimit(1 << 30)
threading.stack_size(1 << 27)
 
main_thread = threading.Thread(target= main)
main_thread.start()
main_thread.join()
