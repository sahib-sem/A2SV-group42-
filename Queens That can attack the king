class Solution:
    def __init__(self):
        self.arr=[]
    def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:
        hor,ver,left_diagonal,right_diagonal=[king],[king],[king],[king]
        for queen in queens:
            x,y=queen
            if king[0]==x:
                ver.append([x,y])
            elif king[1]==y:
                hor.append([x,y])
            elif x+y==king[0]+king[1]:
                left_diagonal.append([x,y])
            elif x-y==king[0]-king[1]:
                right_diagonal.append([x,y])
        hor.sort()
        ver=[[x,y] for x,y in sorted(ver,key=lambda item:item[1])]
        left_diagonal.sort()
        right_diagonal.sort()
        self.returnQueen(hor,king)
        self.returnQueen(ver,king)
        self.returnQueen(left_diagonal,king)
        self.returnQueen(right_diagonal,king)
        return self.arr
    
    def returnQueen(self,lst,king):
        length=len(lst)
        i=0
        while i<length:
            if lst[i]==king:
                if i+1<length:
                    self.arr.append(lst[i+1])
                if i-1>=0:
                    self.arr.append(lst[i-1])
                break
            i+=1
    

                
                

        
