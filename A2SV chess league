n , k = list(map(int,input().split()))
 
lst = list(map(int,input().split()))
lst = [ [item, idx + 1] for idx, item in enumerate(lst)] # O(n)
def find_min(lst):  # O(n)
    arr = []
    for x,y in lst:
        arr.append(x)
        
    return min(arr)
 
def recursive(lst , start, end, k):
    if end - start == 1:
        if abs(lst[start][0] - lst[start + 1][0]) <=k :
            return [lst[start] , lst[start +1]]
        if lst[start][0] > lst[start + 1][0]:
            return [lst[start]]
        else:
            return [lst[start + 1]]
    
    mid = start + (end - start) // 2
    left = recursive(lst,start , mid , k)
    right = recursive(lst, mid + 1, end, k)
    left_min , right_min = find_min(left) , find_min(right)
    return merge(left , right, k, left_min , right_min)
 
def merge(lst1 , lst2 , k, left_min , right_min):
    ans = []
    i = j = 0
 
    while i < len(lst1) and j < len(lst2):
        if lst1[i][0] - right_min >= -1 * k:
            ans.append(lst1[i])
        i += 1
        if lst2[j][0] - left_min >= -1 * k:
            ans.append(lst2[j])
        j += 1
    while i < len(lst1):
        if lst1[i][0] - right_min >= -1 * k:
            ans.append(lst1[i])
        i += 1
    while j < len(lst2):
        if lst2[j][0] - left_min >= -1 * k:
            ans.append(lst2[j])
        j += 1
    return ans
    
ans1 = recursive(lst, 0 , len(lst) - 1,k)
res = []
for x , y in ans1:
    res.append(y)
res.sort()
print(*res)
